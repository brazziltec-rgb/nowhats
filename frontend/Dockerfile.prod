# =============================================================================
# DOCKERFILE DE PRODUÇÃO - FRONTEND REACT
# =============================================================================

# Estágio 1: Build
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar arquivos de dependências
COPY package*.json ./

# Instalar dependências (incluindo devDependencies para o build)
RUN npm install --legacy-peer-deps && npm cache clean --force

# Copiar código fonte
COPY . .

# Argumentos de build
ARG VITE_API_URL
ENV VITE_API_URL=$VITE_API_URL

# Build da aplicação
RUN npm run build

# Estágio 2: Produção com Nginx
FROM nginx:alpine AS production

# Instalar curl para health check
RUN apk add --no-cache curl

# Remover configuração padrão do nginx
RUN rm /etc/nginx/conf.d/default.conf

# Copiar configuração customizada do nginx
COPY nginx.conf /etc/nginx/conf.d/

# Copiar arquivos buildados do estágio anterior
COPY --from=builder /app/dist /usr/share/nginx/html

# Criar usuário não-root
RUN addgroup -g 1001 -S nginx-user
RUN adduser -S nginx-user -u 1001 -G nginx-user

# Criar diretórios necessários e ajustar permissões
RUN mkdir -p /var/run/nginx /var/cache/nginx/client_temp /run && \
    chown -R nginx-user:nginx-user /usr/share/nginx/html /var/cache/nginx /var/log/nginx /etc/nginx/conf.d /var/run/nginx /run && \
    chmod -R 755 /var/cache/nginx /var/log/nginx /var/run/nginx /run && \
    touch /run/nginx.pid && \
    chown nginx-user:nginx-user /run/nginx.pid && \
    chmod 644 /run/nginx.pid

# Expor porta
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80 || exit 1

# Mudar para usuário não-root
USER nginx-user

# Comando de inicialização
CMD ["nginx", "-g", "daemon off;"]