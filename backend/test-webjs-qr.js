import fetch from 'node-fetch';
import QRCode from 'qrcode-terminal';

// Configura√ß√µes da Web.js API
const WEBJS_API_URL = 'http://localhost:3002';
const WEBJS_API_KEY = process.env.WEBJS_API_KEY || 'your-webjs-api-key';
const INSTANCE_NAME = `test-webjs-${Date.now()}`;

console.log('üöÄ Iniciando teste da Web.js API...');
console.log('üîó URL da API:', WEBJS_API_URL);
console.log('üì± Nome da inst√¢ncia:', INSTANCE_NAME);

// Headers para autentica√ß√£o
const headers = {
  'Content-Type': 'application/json',
  'x-api-key': WEBJS_API_KEY
};

async function testWebJsAPI() {
  try {
    console.log('\n1Ô∏è‚É£ Verificando se a Web.js API est√° rodando...');
    
    // Verificar se a API est√° rodando
    const healthResponse = await fetch(`${WEBJS_API_URL}/health`);
    if (!healthResponse.ok) {
      throw new Error(`API n√£o est√° respondendo: ${healthResponse.status}`);
    }
    
    const healthData = await healthResponse.json();
    console.log('‚úÖ Web.js API est√° rodando:', healthData.status);
    console.log('üìä Inst√¢ncias ativas:', healthData.instances);
    
    console.log('\n2Ô∏è‚É£ Criando nova inst√¢ncia...');
    
    // Criar inst√¢ncia
    const createResponse = await fetch(`${WEBJS_API_URL}/instance/create`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        instanceName: INSTANCE_NAME
      })
    });
    
    if (!createResponse.ok) {
      const errorData = await createResponse.json();
      throw new Error(`Erro ao criar inst√¢ncia: ${errorData.error}`);
    }
    
    const createData = await createResponse.json();
    console.log('‚úÖ Inst√¢ncia criada:', createData.instanceName);
    console.log('üìä Status inicial:', createData.status);
    
    console.log('\n3Ô∏è‚É£ Aguardando inicializa√ß√£o e gera√ß√£o do QR code...');
    console.log('‚è≥ Isso pode levar alguns segundos para o Puppeteer inicializar...');
    
    // Aguardar e obter QR code
    let qrCodeObtained = false;
    let attempts = 0;
    const maxAttempts = 20; // Aumentar tentativas pois Web.js demora mais
    
    while (!qrCodeObtained && attempts < maxAttempts) {
      attempts++;
      console.log(`‚è≥ Tentativa ${attempts}/${maxAttempts} - Verificando QR code...`);
      
      await new Promise(resolve => setTimeout(resolve, 3000)); // Aguardar 3 segundos
      
      try {
        // Verificar status primeiro
        const statusResponse = await fetch(`${WEBJS_API_URL}/instance/${INSTANCE_NAME}/status`, {
          headers
        });
        
        if (statusResponse.ok) {
          const statusData = await statusResponse.json();
          console.log(`üìä Status atual: ${statusData.instance.status}`);
          
          if (statusData.instance.status === 'qr_code' && statusData.instance.hasQRCode) {
            // Tentar obter QR code
            const qrResponse = await fetch(`${WEBJS_API_URL}/instance/${INSTANCE_NAME}/qrcode`, {
              headers
            });
            
            if (qrResponse.ok) {
              const qrData = await qrResponse.json();
              
              if (qrData.qrcode && qrData.qrcode.base64) {
                console.log('\nüì± QR Code gerado! Escaneie com seu WhatsApp:');
                console.log('=' .repeat(50));
                
                // Extrair dados do QR code do base64
                const base64Data = qrData.qrcode.base64;
                
                // Para Web.js, vamos tentar extrair o c√≥digo QR do base64
                // Como n√£o temos acesso direto ao c√≥digo QR, vamos mostrar uma mensagem
                console.log('üñºÔ∏è QR Code Base64 recebido com sucesso!');
                console.log('üì± Abra o WhatsApp no seu celular e escaneie o QR code');
                console.log('üîó Para visualizar o QR code, acesse:');
                console.log(`   ${WEBJS_API_URL}/instance/${INSTANCE_NAME}/qrcode`);
                
                // Tentar decodificar se poss√≠vel (isso √© uma simula√ß√£o)
                console.log('\nüìã QR Code dispon√≠vel via API');
                console.log('üí° Dica: Use um cliente HTTP para acessar a URL acima e ver o QR code');
                
                console.log('=' .repeat(50));
                console.log('‚è∞ QR Code expira em 20 segundos. Escaneie rapidamente!');
                console.log('üì± Abra o WhatsApp > Dispositivos conectados > Conectar um dispositivo');
                
                qrCodeObtained = true;
                
                // Monitorar status da conex√£o
                console.log('\n4Ô∏è‚É£ Monitorando status da conex√£o...');
                monitorConnectionStatus();
                
              } else {
                console.log('‚è≥ QR code ainda n√£o est√° dispon√≠vel...');
              }
            } else {
              console.log('‚è≥ QR code ainda n√£o foi gerado...');
            }
          } else if (statusData.instance.status === 'connected') {
            console.log('\nüéâ Inst√¢ncia j√° est√° conectada!');
            qrCodeObtained = true;
          } else if (statusData.instance.status === 'auth_failure') {
            console.log('‚ùå Falha na autentica√ß√£o');
            break;
          } else {
            console.log(`‚è≥ Status: ${statusData.instance.status} - Aguardando...`);
          }
        } else {
          console.log('‚ö†Ô∏è Erro ao verificar status da inst√¢ncia');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar QR code:', error.message);
      }
    }
    
    if (!qrCodeObtained) {
      console.log('‚ùå N√£o foi poss√≠vel obter o QR code ap√≥s v√°rias tentativas');
      console.log('üí° Verifique se o Puppeteer est√° funcionando corretamente');
      return;
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste da Web.js API:', error.message);
    process.exit(1);
  }
}

// Fun√ß√£o para monitorar o status da conex√£o
async function monitorConnectionStatus() {
  const checkStatus = async () => {
    try {
      const statusResponse = await fetch(`${WEBJS_API_URL}/instance/${INSTANCE_NAME}/status`, {
        headers
      });
      
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        const status = statusData.instance.status;
        const connected = statusData.instance.connected;
        const timestamp = new Date().toLocaleTimeString();
        
        console.log(`üìä [${timestamp}] Status: ${status} | Conectado: ${connected ? 'Sim' : 'N√£o'}`);
        
        if (status === 'connected' && connected) {
          console.log('\nüéâ Conex√£o estabelecida com sucesso!');
          console.log('‚úÖ Teste da Web.js API conclu√≠do!');
          console.log('\n‚ö†Ô∏è Pressione Ctrl+C para encerrar o teste');
          return;
        }
        
        if (status === 'auth_failure' || status === 'disconnected') {
          console.log('‚ùå Erro na conex√£o da inst√¢ncia');
          return;
        }
        
        // Continuar monitorando
        setTimeout(checkStatus, 5000);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar status:', error.message);
      setTimeout(checkStatus, 5000);
    }
  };
  
  checkStatus();
}

// Fun√ß√£o de limpeza
async function cleanup() {
  try {
    console.log('\nüßπ Limpando inst√¢ncia de teste...');
    
    const deleteResponse = await fetch(`${WEBJS_API_URL}/instance/${INSTANCE_NAME}`, {
      method: 'DELETE',
      headers
    });
    
    if (deleteResponse.ok) {
      console.log('‚úÖ Inst√¢ncia removida com sucesso');
    } else {
      console.log('‚ö†Ô∏è Erro ao remover inst√¢ncia');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro na limpeza:', error.message);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë Encerrando teste...');
  await cleanup();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Encerrando teste...');
  await cleanup();
  process.exit(0);
});

// Iniciar teste
testWebJsAPI();

console.log('\nüìã Instru√ß√µes:');
console.log('1. Certifique-se de que a Web.js API est√° rodando na porta 3002');
console.log('2. Aguarde a inicializa√ß√£o do Puppeteer (pode demorar)');
console.log('3. Aguarde o QR Code ser gerado');
console.log('4. Acesse a URL fornecida para ver o QR Code');
console.log('5. Abra o WhatsApp no seu celular');
console.log('6. V√° em "Dispositivos conectados"');
console.log('7. Toque em "Conectar um dispositivo"');
console.log('8. Escaneie o QR Code');
console.log('9. Aguarde a confirma√ß√£o de conex√£o');
console.log('\n‚è≥ Aguardando...');