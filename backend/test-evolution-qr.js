import fetch from 'node-fetch';
import QRCode from 'qrcode-terminal';

// Configura√ß√µes da Evolution API
const EVOLUTION_API_URL = 'http://localhost:8080';
const EVOLUTION_API_KEY = process.env.EVOLUTION_API_KEY || 'your-evolution-api-key';
const INSTANCE_NAME = `test-evolution-${Date.now()}`;

console.log('üöÄ Iniciando teste da Evolution API...');
console.log('üîó URL da API:', EVOLUTION_API_URL);
console.log('üì± Nome da inst√¢ncia:', INSTANCE_NAME);

// Headers para autentica√ß√£o
const headers = {
  'Content-Type': 'application/json',
  'apikey': EVOLUTION_API_KEY
};

async function testEvolutionAPI() {
  try {
    console.log('\n1Ô∏è‚É£ Verificando se a Evolution API est√° rodando...');
    
    // Verificar se a API est√° rodando
    const healthResponse = await fetch(`${EVOLUTION_API_URL}/health`);
    if (!healthResponse.ok) {
      throw new Error(`API n√£o est√° respondendo: ${healthResponse.status}`);
    }
    
    const healthData = await healthResponse.json();
    console.log('‚úÖ Evolution API est√° rodando:', healthData.status);
    
    console.log('\n2Ô∏è‚É£ Criando nova inst√¢ncia...');
    
    // Criar inst√¢ncia
    const createResponse = await fetch(`${EVOLUTION_API_URL}/instance/create`, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        instanceName: INSTANCE_NAME
      })
    });
    
    if (!createResponse.ok) {
      const errorData = await createResponse.json();
      throw new Error(`Erro ao criar inst√¢ncia: ${errorData.error}`);
    }
    
    const createData = await createResponse.json();
    console.log('‚úÖ Inst√¢ncia criada:', createData.instance.instanceName);
    
    console.log('\n3Ô∏è‚É£ Conectando inst√¢ncia...');
    
    // Conectar inst√¢ncia
    const connectResponse = await fetch(`${EVOLUTION_API_URL}/instance/connect/${INSTANCE_NAME}`, {
      method: 'POST',
      headers
    });
    
    if (!connectResponse.ok) {
      const errorData = await connectResponse.json();
      throw new Error(`Erro ao conectar inst√¢ncia: ${errorData.error}`);
    }
    
    const connectData = await connectResponse.json();
    console.log('‚úÖ Inst√¢ncia conectando:', connectData.instance.status);
    
    console.log('\n4Ô∏è‚É£ Aguardando gera√ß√£o do QR code...');
    
    // Aguardar e obter QR code
    let qrCodeObtained = false;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (!qrCodeObtained && attempts < maxAttempts) {
      attempts++;
      console.log(`‚è≥ Tentativa ${attempts}/${maxAttempts} - Verificando QR code...`);
      
      await new Promise(resolve => setTimeout(resolve, 2000)); // Aguardar 2 segundos
      
      try {
        const qrResponse = await fetch(`${EVOLUTION_API_URL}/instance/qrcode/${INSTANCE_NAME}`, {
          headers
        });
        
        if (qrResponse.ok) {
          const qrData = await qrResponse.json();
          
          if (qrData.qrcode && qrData.qrcode.code) {
            console.log('\nüì± QR Code gerado! Escaneie com seu WhatsApp:');
            console.log('=' .repeat(50));
            
            // Gerar QR code no terminal
            QRCode.generate(qrData.qrcode.code, { small: true });
            
            console.log('=' .repeat(50));
            console.log('‚è∞ QR Code expira em 20 segundos. Escaneie rapidamente!');
            console.log('üì± Abra o WhatsApp > Dispositivos conectados > Conectar um dispositivo');
            console.log('\nüîó Dados do QR Code:', qrData.qrcode.code);
            console.log('üñºÔ∏è Base64 dispon√≠vel:', qrData.qrcode.base64 ? 'Sim' : 'N√£o');
            
            qrCodeObtained = true;
            
            // Monitorar status da conex√£o
            console.log('\n5Ô∏è‚É£ Monitorando status da conex√£o...');
            monitorConnectionStatus();
            
          } else {
            console.log('‚è≥ QR code ainda n√£o est√° dispon√≠vel...');
          }
        } else {
          console.log('‚è≥ QR code ainda n√£o foi gerado...');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao verificar QR code:', error.message);
      }
    }
    
    if (!qrCodeObtained) {
      console.log('‚ùå N√£o foi poss√≠vel obter o QR code ap√≥s v√°rias tentativas');
      return;
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste da Evolution API:', error.message);
    process.exit(1);
  }
}

// Fun√ß√£o para monitorar o status da conex√£o
async function monitorConnectionStatus() {
  const checkStatus = async () => {
    try {
      const statusResponse = await fetch(`${EVOLUTION_API_URL}/instance/status/${INSTANCE_NAME}`, {
        headers
      });
      
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        const status = statusData.instance.status;
        const timestamp = new Date().toLocaleTimeString();
        
        console.log(`üìä [${timestamp}] Status da inst√¢ncia: ${status}`);
        
        if (status === 'open' || status === 'connected') {
          console.log('\nüéâ Conex√£o estabelecida com sucesso!');
          console.log('‚úÖ Teste da Evolution API conclu√≠do!');
          console.log('\n‚ö†Ô∏è Pressione Ctrl+C para encerrar o teste');
          return;
        }
        
        if (status === 'error') {
          console.log('‚ùå Erro na conex√£o da inst√¢ncia');
          return;
        }
        
        // Continuar monitorando
        setTimeout(checkStatus, 5000);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao verificar status:', error.message);
      setTimeout(checkStatus, 5000);
    }
  };
  
  checkStatus();
}

// Fun√ß√£o de limpeza
async function cleanup() {
  try {
    console.log('\nüßπ Limpando inst√¢ncia de teste...');
    
    const deleteResponse = await fetch(`${EVOLUTION_API_URL}/instance/delete/${INSTANCE_NAME}`, {
      method: 'DELETE',
      headers
    });
    
    if (deleteResponse.ok) {
      console.log('‚úÖ Inst√¢ncia removida com sucesso');
    } else {
      console.log('‚ö†Ô∏è Erro ao remover inst√¢ncia');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro na limpeza:', error.message);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë Encerrando teste...');
  await cleanup();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Encerrando teste...');
  await cleanup();
  process.exit(0);
});

// Iniciar teste
testEvolutionAPI();

console.log('\nüìã Instru√ß√µes:');
console.log('1. Certifique-se de que a Evolution API est√° rodando na porta 8080');
console.log('2. Aguarde o QR Code aparecer');
console.log('3. Abra o WhatsApp no seu celular');
console.log('4. V√° em "Dispositivos conectados"');
console.log('5. Toque em "Conectar um dispositivo"');
console.log('6. Escaneie o QR Code que aparecer√° abaixo');
console.log('7. Aguarde a confirma√ß√£o de conex√£o');
console.log('\n‚è≥ Aguardando...');