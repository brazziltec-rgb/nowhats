# Script PowerShell para diagnosticar e resolver problemas de autentica√ß√£o
# Autor: Sistema de Instala√ß√£o Autom√°tica Nowhats
# Data: $(Get-Date -Format 'yyyy-MM-dd')

param(
    [string]$Action = "menu"
)

# Fun√ß√£o para log colorido
function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "Info"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    switch ($Level) {
        "Success" { Write-Host "[$timestamp] ‚úì $Message" -ForegroundColor Green }
        "Warning" { Write-Host "[$timestamp] ‚ö† $Message" -ForegroundColor Yellow }
        "Error" { Write-Host "[$timestamp] ‚úó $Message" -ForegroundColor Red }
        default { Write-Host "[$timestamp] $Message" -ForegroundColor Blue }
    }
}

# Verificar se Docker est√° rodando
function Test-DockerRunning {
    try {
        $null = docker info 2>$null
        return $true
    }
    catch {
        return $false
    }
}

# Verificar se estamos no diret√≥rio correto
function Test-ProjectDirectory {
    return Test-Path "docker-compose.yml"
}

# Fun√ß√£o para diagnosticar problemas
function Invoke-DiagnoseAuthIssues {
    Write-Log "üîç Diagnosticando problemas de autentica√ß√£o..." "Info"
    
    # Verificar se os containers est√£o rodando
    Write-Log "Verificando status dos containers..." "Info"
    try {
        $containers = docker-compose ps
        if ($containers -match "Up") {
            Write-Log "Containers est√£o rodando" "Success"
        }
        else {
            Write-Log "Alguns containers n√£o est√£o rodando" "Error"
            docker-compose ps
        }
    }
    catch {
        Write-Log "Erro ao verificar containers: $($_.Exception.Message)" "Error"
    }
    
    # Verificar logs do backend
    Write-Log "Verificando logs do backend (√∫ltimas 50 linhas)..." "Info"
    try {
        docker-compose logs --tail=50 backend
    }
    catch {
        Write-Log "Erro ao obter logs do backend: $($_.Exception.Message)" "Error"
    }
    
    # Verificar logs do Redis (se existir)
    $redisExists = docker-compose ps | Select-String "redis"
    if ($redisExists) {
        Write-Log "Verificando logs do Redis..." "Info"
        try {
            docker-compose logs --tail=20 redis
        }
        catch {
            Write-Log "Erro ao obter logs do Redis: $($_.Exception.Message)" "Error"
        }
    }
    
    # Verificar conectividade com backend
    Write-Log "Testando conectividade com backend..." "Info"
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -Method GET -TimeoutSec 10 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Log "Backend est√° respondendo" "Success"
        }
        else {
            Write-Log "Backend retornou status: $($response.StatusCode)" "Warning"
        }
    }
    catch {
        Write-Log "Backend n√£o est√° respondendo: $($_.Exception.Message)" "Error"
    }
}

# Fun√ß√£o para limpar rate limiting
function Clear-RateLimiting {
    Write-Log "üßπ Limpando rate limiting..." "Info"
    
    # Se estiver usando Redis para rate limiting
    $redisExists = docker-compose ps | Select-String "redis"
    if ($redisExists) {
        Write-Log "Limpando cache do Redis..." "Info"
        try {
            docker-compose exec -T redis redis-cli FLUSHALL
            Write-Log "Cache do Redis limpo" "Success"
        }
        catch {
            Write-Log "Erro ao limpar Redis: $($_.Exception.Message)" "Error"
        }
    }
    
    # Reiniciar o backend para limpar rate limiting em mem√≥ria
    Write-Log "Reiniciando backend para limpar rate limiting em mem√≥ria..." "Info"
    try {
        docker-compose restart backend
        Write-Log "Backend reiniciado" "Success"
    }
    catch {
        Write-Log "Erro ao reiniciar backend: $($_.Exception.Message)" "Error"
        return
    }
    
    # Aguardar o backend inicializar
    Write-Log "Aguardando backend inicializar..." "Info"
    Start-Sleep -Seconds 10
    
    # Verificar se o backend est√° respondendo
    $maxAttempts = 30
    $attempt = 1
    
    while ($attempt -le $maxAttempts) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -Method GET -TimeoutSec 5 -ErrorAction SilentlyContinue
            if ($response.StatusCode -eq 200) {
                Write-Log "Backend est√° respondendo na tentativa $attempt" "Success"
                break
            }
        }
        catch {
            # Continuar tentando
        }
        
        if ($attempt -eq $maxAttempts) {
            Write-Log "Backend n√£o respondeu ap√≥s $maxAttempts tentativas" "Error"
            return
        }
        
        Write-Log "Tentativa $attempt/$maxAttempts - aguardando..." "Info"
        Start-Sleep -Seconds 2
        $attempt++
    }
}

# Fun√ß√£o para verificar vari√°veis de ambiente
function Test-Environment {
    Write-Log "üîß Verificando vari√°veis de ambiente..." "Info"
    
    # Verificar se o arquivo .env existe
    if (-not (Test-Path ".env")) {
        Write-Log "Arquivo .env n√£o encontrado" "Error"
        return
    }
    
    # Verificar vari√°veis cr√≠ticas
    $requiredVars = @("JWT_SECRET", "JWT_REFRESH_SECRET", "DB_PASSWORD")
    $envContent = Get-Content ".env"
    
    foreach ($var in $requiredVars) {
        $line = $envContent | Where-Object { $_ -match "^$var=" }
        if ($line) {
            $value = ($line -split "=", 2)[1]
            if ($value -and $value -ne "your_secret_here") {
                Write-Log "$var est√° configurado" "Success"
            }
            else {
                Write-Log "$var n√£o est√° configurado corretamente" "Error"
            }
        }
        else {
            Write-Log "$var n√£o encontrado no .env" "Error"
        }
    }
}

# Fun√ß√£o para testar autentica√ß√£o
function Test-Authentication {
    Write-Log "üß™ Testando autentica√ß√£o..." "Info"
    
    # Testar endpoint de health
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -Method GET -TimeoutSec 10 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Log "API est√° respondendo" "Success"
        }
        else {
            Write-Log "API retornou status: $($response.StatusCode)" "Error"
            return
        }
    }
    catch {
        Write-Log "API n√£o est√° respondendo: $($_.Exception.Message)" "Error"
        return
    }
    
    # Testar rate limiting (deve permitir algumas tentativas)
    Write-Log "Testando rate limiting..." "Info"
    try {
        $body = @{
            email = "test@test.com"
            password = "test"
        } | ConvertTo-Json
        
        $response = Invoke-WebRequest -Uri "http://localhost:3001/api/auth/login" -Method POST -Body $body -ContentType "application/json" -ErrorAction SilentlyContinue
        
        switch ($response.StatusCode) {
            { $_ -in @(400, 401) } {
                Write-Log "Rate limiting est√° funcionando normalmente (HTTP $($response.StatusCode))" "Success"
            }
            429 {
                Write-Log "Rate limiting ainda est√° ativo (HTTP 429)" "Warning"
                Write-Log "Aguarde 15 minutos ou execute a limpeza novamente" "Info"
            }
            default {
                Write-Log "Resposta inesperada: HTTP $($response.StatusCode)" "Warning"
            }
        }
    }
    catch {
        $statusCode = $_.Exception.Response.StatusCode.value__
        if ($statusCode -eq 429) {
            Write-Log "Rate limiting ainda est√° ativo (HTTP 429)" "Warning"
            Write-Log "Aguarde 15 minutos ou execute a limpeza novamente" "Info"
        }
        elseif ($statusCode -in @(400, 401)) {
            Write-Log "Rate limiting est√° funcionando normalmente (HTTP $statusCode)" "Success"
        }
        else {
            Write-Log "Erro ao testar autentica√ß√£o: $($_.Exception.Message)" "Error"
        }
    }
}

# Fun√ß√£o para mostrar informa√ß√µes √∫teis
function Show-UsefulInfo {
    Write-Log "üìã Informa√ß√µes √∫teis:" "Info"
    
    Write-Host ""
    Write-Host "üîó URLs de acesso:" -ForegroundColor Cyan
    Write-Host "   Frontend: http://localhost:3000" -ForegroundColor White
    Write-Host "   Backend API: http://localhost:3001/api" -ForegroundColor White
    Write-Host "   Health Check: http://localhost:3001/api/health" -ForegroundColor White
    
    Write-Host ""
    Write-Host "üìä Status dos containers:" -ForegroundColor Cyan
    try {
        docker-compose ps
    }
    catch {
        Write-Log "Erro ao obter status dos containers: $($_.Exception.Message)" "Error"
    }
    
    Write-Host ""
    Write-Host "üõ†Ô∏è Comandos √∫teis:" -ForegroundColor Cyan
    Write-Host "   Ver logs do backend: docker-compose logs -f backend" -ForegroundColor White
    Write-Host "   Ver logs do frontend: docker-compose logs -f frontend" -ForegroundColor White
    Write-Host "   Reiniciar servi√ßos: docker-compose restart" -ForegroundColor White
    Write-Host "   Parar tudo: docker-compose down" -ForegroundColor White
    Write-Host "   Iniciar tudo: docker-compose up -d" -ForegroundColor White
    
    Write-Host ""
    Write-Host "üîß Para problemas persistentes:" -ForegroundColor Cyan
    Write-Host "   1. Verifique o arquivo .env" -ForegroundColor White
    Write-Host "   2. Verifique os logs: docker-compose logs" -ForegroundColor White
    Write-Host "   3. Reinicie os containers: docker-compose restart" -ForegroundColor White
    Write-Host "   4. Se necess√°rio, recrie os containers: docker-compose down && docker-compose up -d" -ForegroundColor White
}

# Fun√ß√£o principal
function Main {
    Write-Host "=" * 60 -ForegroundColor Cyan
    Write-Host "üîß DIAGN√ìSTICO E CORRE√á√ÉO DE PROBLEMAS DE AUTENTICA√á√ÉO" -ForegroundColor Cyan
    Write-Host "=" * 60 -ForegroundColor Cyan
    Write-Host ""
    
    # Verificar se Docker est√° rodando
    if (-not (Test-DockerRunning)) {
        Write-Log "Docker n√£o est√° rodando. Inicie o Docker primeiro." "Error"
        return
    }
    
    # Verificar se estamos no diret√≥rio correto
    if (-not (Test-ProjectDirectory)) {
        Write-Log "docker-compose.yml n√£o encontrado. Execute este script no diret√≥rio raiz do projeto." "Error"
        return
    }
    
    # Menu de op√ß√µes
    if ($Action -eq "menu") {
        Write-Host "Escolha uma op√ß√£o:" -ForegroundColor Yellow
        Write-Host "1) Diagn√≥stico completo" -ForegroundColor White
        Write-Host "2) Limpar rate limiting" -ForegroundColor White
        Write-Host "3) Verificar vari√°veis de ambiente" -ForegroundColor White
        Write-Host "4) Testar autentica√ß√£o" -ForegroundColor White
        Write-Host "5) Mostrar informa√ß√µes √∫teis" -ForegroundColor White
        Write-Host "6) Executar tudo (diagn√≥stico + limpeza + teste)" -ForegroundColor White
        Write-Host "0) Sair" -ForegroundColor White
        Write-Host ""
        $choice = Read-Host "Digite sua escolha [0-6]"
    }
    else {
        $choice = $Action
    }
    
    switch ($choice) {
        "1" {
            Invoke-DiagnoseAuthIssues
        }
        "2" {
            Clear-RateLimiting
        }
        "3" {
            Test-Environment
        }
        "4" {
            Test-Authentication
        }
        "5" {
            Show-UsefulInfo
        }
        "6" {
            Invoke-DiagnoseAuthIssues
            Write-Host ""
            Test-Environment
            Write-Host ""
            Clear-RateLimiting
            Write-Host ""
            Test-Authentication
            Write-Host ""
            Show-UsefulInfo
        }
        "0" {
            Write-Log "Saindo..." "Info"
            return
        }
        default {
            Write-Log "Op√ß√£o inv√°lida" "Error"
            return
        }
    }
    
    Write-Host ""
    Write-Log "Opera√ß√£o conclu√≠da!" "Success"
}

# Executar fun√ß√£o principal
Main